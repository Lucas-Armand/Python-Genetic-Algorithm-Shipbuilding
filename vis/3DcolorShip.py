# -*- coding: utf-8 -*-

import os
import math
import csv
import random
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.colors as color
import matplotlib.pyplot as plt
import numpy as np
from itertools import product, combinations
import matplotlib.animation as animation


import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib.cm as cmx


from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
from itertools import product, combinations
from numpy import sin, cos
from matplotlib.patches import Rectangle, Circle, PathPatch
import mpl_toolkits.mplot3d.art3d as art3d

jet = cm = plt.get_cmap('jet') 
cNorm  = colors.Normalize(vmin=0, vmax=70)
scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=jet)

def csv_read(name):	#Metodo de leitura, transforma um arquivo CSV em  um vetor 

    CSV=open(name,'r')
    dados=CSV.read()
    dados=dados.replace(',','.')
    dados=dados.replace(';',',')
    CSV.close()
    
    CSV=open("temp.csv",'w')
    CSV.write(dados)
    CSV.close()
    
    CSV=open("temp.csv",'r')
    dados=csv.reader(CSV)
    v=[]
    for i in dados:
        I=[]    
        for j in i:
            try:
                j = float(j)
            except:
                pass
            I.append(j)
        v.append(I)
    CSV.close()
    os.remove("temp.csv")
    return (v)

def createBlock(ax,block,blocksList):
    point = block[0]
    point = [i - 0.2 for i in point]
    a = block[1]-0.4
    b = block[2]-0.4
    c = block[3]-0.4
    
    idx = blocksList.index(block)
    clr = scalarMap.to_rgba(idx)
    
    for s, e in combinations(np.array(list(product([0,a],[0,b],[0,c]))), 2):
        s=s+point
        e=e+point
        alfa = round(a, 5)
        beta = round(b, 5)
        gama = round(c, 5)
        delt = round(np.linalg.norm(np.abs(s-e)),5)
        if delt in [alfa,beta,gama]:
            ax.plot3D(*zip(s,e),color = clr)

def createBlock2(ax,block,blocksList):
    point = block[0]
    point = [i - 0.2 for i in point]
    a = block[1]-0.4
    b = block[2]-0.4
    c = block[3]-0.4

    sides = [a,b,c]
    
    #

    idx = blocksList.index(block)
    clr = scalarMap.to_rgba(idx)


    cube = [(0, (point[0], 'x')),
            (1, (point[1], 'y')),
            (2, (point[2], 'z')),
            (0, (point[0]+a, 'x')),
            (1, (point[1]+b, 'y')),
            (2, (point[2]+c, 'z'))]

    for i, (z, zdir) in cube:

        rec_point = [point[j] for j in range(3) if j != i]
        s1,s2  = (sides[j] for j in range(3) if j != i)
        side = Rectangle(rec_point, s1,s2, facecolor=clr)
        ax.add_patch(side)
        art3d.pathpatch_2d_to_3d(side, z=z, zdir=zdir)
    #

def createBlock3(ax,block,alfa):
    point = block[0]
    point = [i - 0.2 for i in point]
    a = block[1]-0.4
    b = block[2]-0.4
    c = block[3]-0.4

    sides = [a,b,c]
    
    #

    clr = scalarMap.to_rgba(alfa)


    cube = [(0, (point[0], 'x')),
            (1, (point[1], 'y')),
            (2, (point[2], 'z')),
            (0, (point[0]+a, 'x')),
            (1, (point[1]+b, 'y')),
            (2, (point[2]+c, 'z'))]

    for i, (z, zdir) in cube:

        rec_point = [point[j] for j in range(3) if j != i]
        s1,s2  = (sides[j] for j in range(3) if j != i)
        side = Rectangle(rec_point, s1,s2, facecolor=clr)
        ax.add_patch(side)
        art3d.pathpatch_2d_to_3d(side, z=z, zdir=zdir)
    #


def defineGeometry(name):

    vect = csv_read(name)
    blockNumber ={}
    blockType   ={}
    for i in vect:
        a = i[1]
        b = i[2]
        c = i[3]
        point = [i[4],i[5],i[6]]
        block = [point,a,b,c]
        try:
            blockNumber[i[0]] = block
            blockType[i[-1]]  = [block]+blockType[i[-1]]
        except:
            blockType[i[-1]]  = [block]
        
    return blockNumber,blockType

def Ship3Dcolor(fig,bNumb,sequency,N):
    
    ax = fig.gca(projection='3d')
    ax.set_aspect("equal")
    if N ==1:
        blocskList = [bNumb[i] for i in sequency]  
        for block in blocksList:
            createBlock2(ax,block,blocksList)
    if N==2:
        blocksList = [bNumb[i] for i in sequency]  
        for block in blocksList:
            createBlock2(ax,block,blocksList)
    if N==3:
        for i in range(1,71):
            createBlock3(ax,bNumb[i],sequency[i-1])
    
        
    # Create cubic bounding box to simulate equal aspect ratio #
    Xb = 0.5*250*np.mgrid[-1:2:2,-1:2:2,-1:2:2][0].flatten() + 125
    Yb = 0.5*200*np.mgrid[-1:2:2,-1:2:2,-1:2:2][1].flatten() + 0
    Zb = 0.5*200*np.mgrid[-1:2:2,-1:2:2,-1:2:2][2].flatten() + 20    
    for xb, yb, zb in zip(Xb, Yb, Zb):
       ax.plot([xb], [yb], [zb], 'w')
    fig.tight_layout(pad=0.5)

def anim(i,fig,bNumb,order,color):
    try:
        Ship3Dplot(fig, [bNumb[order[i]]])
    except:
        pass
    
if __name__ == "__main__":
    fig = plt.figure()
    bNumb,bType =defineGeometry('GeometriaNavio.csv')

##    chromo = csv_read('Ordens/Grande Bloco_Meio Navio-PopaProa.csv')
##    chromo = csv_read('Ordens/Camada_Meio Navio-PopaProa.csv')
##    chromo = csv_read('Ordens/Piramide_Meio Navio-PopaProa.csv')
##    chromo = csv_read('Ordens/Grande bloco_Popa-Proa.csv')
##    chromo = csv_read('Ordens/Camada_Popa-Proa.csv')
##    chromo = csv_read('Ordens/Piramide_Popa-Proa.csv')
##
##    orderly = [59.443, 58.903, 59.397, 59.408, 58.211, 58.548, 58.901, 59.028, 59.527, 59.21, 58.327, 58.358, 59.333, 59.9, 58.98, 58.739, 44.795, 44.986, 44.881, 45.264, 43.101, 42.625, 44.823, 44.647, 45.385, 45.214, 42.198, 42.405, 45.423, 45.777, 44.714, 45.123, 16.634, 16.765, 16.968, 16.671, 16.403, 16.732, 16.698, 16.444, 19.208, 18.735, 18.54, 19.151, 16.267, 16.666, 16.651, 16.649, 16.912, 16.87, 16.677, 16.916, 18.671, 18.685, 18.715, 18.672, 16.898, 16.96, 16.882, 17.355, 16.806, 16.738, 16.69, 16.919, 34.484, 34.238, 34.185, 34.432, 34.893, 34.646]
##    try:
##        chromo =[int(i[0]) for i in order]
##    except:
##        pass


###### CONFIGURATION: ####
##    
##    Ship3Dcolor(fig,bNumb,LIST_OF_BLOCKS = sequency or orderly,n)
##
##    IF n == 1:
##
##        TRANSPARENT BLOCKS AND LIST_OF_BLOCKS = sequency
##        
##    IF n == 2:
##
##        COLOR'S BLOCKS AND LIST_OF_BLOCKS = sequency
##
##    IF n == 3:
##
##        COLOR'S BLOCKS AND LIST_OF_BLOCKS = orderly
##
##########################

    #same type = less time:
    orderly = [68, 66, 65, 62, 56, 55, 51, 52, 53, 54, 57, 58, 63, 64, 67, 69, 59, 50, 40, 44, 33, 32, 39, 41, 42, 43, 45, 46, 48, 49, 60, 61, 31, 29, 24, 25, 21, 22, 20, 26, 10, 23, 4, 28, 3, 2, 17, 0, 5, 1, 11, 6, 8, 7, 19, 9, 13, 12, 16, 14, 30, 15, 27, 18, 36, 35, 34, 37, 38, 47]

    #diferent type = less time:
    orderly = [69, 67, 65, 64, 62, 56, 54, 48, 41, 44, 50, 52, 58, 60, 66, 68, 55, 59, 47, 43, 31, 21, 33, 35, 37, 39, 49, 45, 53, 57, 63, 61, 42, 32, 38, 27, 34, 25, 36, 22, 13, 11, 10, 9, 19, 8, 28, 7, 16, 6, 1, 5, 0, 14, 2, 15, 3, 4, 12, 18, 17, 20, 30, 23, 46, 40, 29, 24, 26, 51]
    sequency = [53, 51, 49, 50, 55, 48, 56, 46, 44, 42, 40, 38, 37, 57, 58, 54, 59, 35, 33, 61, 52, 39, 62, 64, 47, 41, 43, 36, 63, 34, 45, 60, 68, 25, 26, 27, 67, 69, 70, 66, 10, 24, 28, 11, 65, 22, 29, 23, 21, 20, 19, 31, 30, 17, 18, 32, 12, 9, 13, 8, 14, 7, 6, 5, 4, 3, 2, 15, 16, 1]
    sequency = [54, 53, 50, 49, 61, 44, 58, 46, 59, 35, 57, 47, 62, 43, 39, 51, 38, 45, 56, 48, 67, 60, 41, 55, 63, 69, 37, 40, 52, 34, 36, 23, 27, 28, 33, 68, 25, 65, 64, 66, 30, 12, 18, 20, 70, 24, 31, 29, 42, 21, 26, 17, 11, 22, 32, 6, 10, 14, 15, 2, 1, 7, 13, 16, 9, 8, 19, 5, 4, 3]
    sequency = [46, 44, 48, 42, 45, 41, 43, 39, 47, 50, 67, 49, 51, 40, 37, 53, 22, 55, 52, 21, 38, 56, 66, 54, 24, 35, 58, 68, 36, 23, 57, 8, 60, 26, 34, 20, 59, 25, 62, 69, 33, 19, 61, 9, 63, 28, 65, 30, 7, 27, 10, 64, 6, 29, 5, 70, 11, 17, 12, 32, 13, 31, 14, 18, 4, 15, 16, 3, 2, 1]
    sequency = [55, 51, 34, 48, 58, 54, 56, 52, 47, 62, 60, 49, 40, 50, 43, 61, 68, 46, 45, 57, 37, 41, 67, 44, 36, 63, 42, 35, 59, 33, 23, 24, 65, 64, 21, 22, 53, 69, 70, 18, 17, 31, 32, 7, 8, 28, 27, 25, 26, 2, 1, 39, 38, 29, 30, 10, 9, 14, 13, 15, 16, 66, 19, 20, 6, 5, 12, 11, 3, 4]
    sequency = [37, 38, 40, 39, 49, 52, 50, 51, 54, 56, 55, 53, 58, 59, 57, 60, 45, 46, 48, 47, 64, 63, 61, 62, 66, 33, 35, 36, 34, 42, 41, 43, 44, 67, 24, 23, 28, 27, 68, 70, 26, 25, 19, 20, 8, 7, 3, 4, 32, 31, 21, 22, 15, 16, 6, 5, 69, 9, 10, 30, 29, 65, 17, 18, 11, 12, 2, 1, 13, 14]
    sequency = [49, 51, 50, 52, 54, 53, 56, 55, 48, 47, 46, 45, 44, 42, 43, 41, 68, 39, 37, 40, 38, 67, 58, 57, 60, 59, 66, 22, 21, 35, 33, 34, 36, 23, 24, 61, 63, 64, 62, 26, 25, 8, 7, 19, 20, 6, 5, 69, 4, 3, 28, 27, 65, 30, 29, 9, 10, 17, 18, 11, 12, 70, 2, 1, 13, 14, 32, 31, 15, 16]
    sequency = [55, 56, 54, 53, 52, 51, 49, 50, 57, 59, 60, 58, 48, 47, 46, 45, 28, 27, 44, 42, 43, 41, 69, 62, 61, 64, 63, 29, 30, 40, 39, 37, 38, 68, 35, 36, 33, 34, 67, 25, 26, 14, 13, 66, 12, 11, 23, 24, 10, 9, 21, 22, 70, 8, 7, 19, 20, 6, 5, 65, 18, 17, 4, 3, 32, 31, 15, 16, 2, 1]
    sequency = [66.65, 65.65, 59.44, 58.46, 50.03, 49.29, 47.04, 46.76, 46.96, 47.18, 47.82, 48.46, 58.13, 59.11, 65.28, 66.28, 61.43, 61.37, 49.39, 49.25, 34.6, 34.5, 33.61, 33.69, 33.52, 33.48, 34.02, 33.74, 49.86, 49.74, 62.01, 62.11, 33.63, 33.72, 32.3, 32.19, 22.55, 22.78, 21.22, 21.61, 13.09, 13.23, 12.37, 12.15, 7.6, 7.67, 7.31, 7.42, 7.63, 7.44, 7.67, 7.7, 11.68, 11.99, 12.51, 12.82, 21.18, 21.18, 22.56, 22.48, 32.28, 32.15, 33.71, 33.54, 52.8, 36.72, 20.05, 18.66, 35.79, 52.76]
    sequency = [54, 56, 53, 55, 28, 27, 57, 58, 59, 60, 51, 52, 49, 50, 68, 48, 46, 47, 45, 69, 44, 43, 41, 42, 26, 25, 40, 38, 39, 37, 11, 12, 62, 61, 63, 64, 30, 29, 67, 13, 14, 35, 36, 33, 34, 70, 23, 24, 10, 9, 21, 22, 66, 8, 7, 65, 19, 20, 6, 5, 18, 17, 4, 3, 32, 31, 15, 16, 2, 1]
    sequency = [42, 44, 43, 41, 21, 22, 46, 45, 48, 47, 67, 49, 50, 52, 51, 23, 24,
       53, 54, 56, 55, 68, 39, 40, 38, 37, 25, 26, 57, 58, 60, 59, 66, 36,
       35, 33, 34, 20, 19,  7,  8, 62, 61, 63, 64,  6,  5, 69, 28, 27,  9,
       10, 65,  4,  3, 18, 17,  2,  1, 29, 30, 11, 12, 70, 13, 14, 32, 31,
       15, 16]
    sequency = [48, 50, 46, 52, 47, 49, 54, 44, 37, 45, 56, 55, 57, 51, 42, 40, 58, 41, 38, 59, 53, 39, 68, 43, 60, 35, 36, 21, 67, 33, 66, 34, 62, 22, 69, 6, 64, 23, 19, 25, 26, 24, 7, 63, 8, 27, 20, 28, 5, 65, 9, 61, 10, 11, 70, 12, 30, 18, 29, 31, 17, 32, 4, 13, 14, 3, 2, 15, 1, 16]
    sequency = [47, 45, 48, 50, 43, 52, 54, 49, 44, 41, 39, 53, 42, 55, 56, 57, 37,
       40, 38, 35, 21, 59, 46, 22, 60, 51, 67, 58, 66, 33, 20, 62, 23, 64,
       68, 19, 61, 25, 36, 24, 34, 27, 63, 26, 65, 28,  8, 69, 30,  7, 70,
       29, 18, 17, 32, 31,  9,  6,  5,  4, 10, 11, 12, 13,  3, 14,  2, 15,
       16,  1]
    

    
    sequency = [51, 49, 53, 47, 52, 50, 45, 43, 54, 41, 56, 39, 55, 57, 40, 37, 59, 44, 60, 38, 28, 36, 48, 27, 62, 46, 66, 58, 61, 35, 63, 67, 42, 68, 33, 69, 34, 26, 25, 24, 23, 22, 30, 21, 64, 7, 6, 65, 29, 20, 18, 70, 8, 9, 10, 11, 31, 17, 19, 32, 5, 12, 13, 4, 3, 14, 2, 15, 16, 1]
    sequency = [46, 44, 42, 45, 47, 40, 49, 50, 38, 52, 48, 51, 54, 53, 39, 55, 41, 36, 57, 37, 68, 56, 59, 67, 58, 61, 26, 60, 25, 62, 69, 43, 10, 64, 66, 34, 24, 63, 22, 23, 35, 70, 33, 65, 27, 29, 28, 20, 21, 31, 18, 19, 30, 32, 17, 9, 8, 11, 12, 7, 6, 13, 5, 4, 3, 2, 1, 14, 15, 16]
#    sequency = [65.2, 64.2, 57.5, 56.5, 46.8, 46.4, 46.1, 45.9, 46.7, 46.9, 50.9, 51.9, 58.9, 59.9, 66.1, 67.1, 61.7, 62.3, 48.9, 49.3, 27.0, 27.4, 24.7, 24.7, 31.6, 32.0, 39.3, 39.7, 53.6, 53.4, 62.4, 62.6, 34.9, 35.2, 33.0, 33.7, 21.7, 21.9, 20.6, 20.2, 9.5, 10.3, 9.1, 9.5, 3.8, 4.2, 4.3, 4.1, 6.9, 7.8, 7.8, 8.3, 15.3, 15.5, 16.7, 16.5, 25.5, 25.6, 27.0, 27.1, 38.3, 37.0, 39.4, 38.5, 53.7, 32.0, 11.9, 16.5, 41.2, 52.9] 
    orderly = [65.76, 63.62, 61.38, 57.56, 55.88, 53.26, 52.44, 52.28, 52.76, 54.04, 57.12, 61.76, 64.34, 66.58, 68.44, 53.9, 54.3, 48.42, 47.84, 36.92, 38.74, 36.48, 36.04, 33.34, 35.06, 34.2, 32.76, 46.66, 45.26, 54.32, 54.42, 35.22, 37.06, 26.9, 28.62, 20.18, 22.2, 15.84, 18.08, 12.76, 14.04, 9.54, 10.32, 7.22, 7.28, 7.08, 5.82, 7.14, 6.2, 8.82, 6.76, 11.96, 10.8, 15.0, 13.4, 18.48, 17.74, 22.36, 21.94, 27.68, 30.36, 36.0, 35.94, 44.84, 32.62, 23.34, 23.48, 33.54, 44.86, 67.7, 65.76, 63.62, 61.38, 57.56, 55.88, 53.26, 52.44, 52.28, 52.76, 54.04, 57.12, 61.76, 64.34, 66.58, 68.44, 53.9, 54.3, 48.42, 47.84, 36.92, 38.74, 36.48, 36.04, 33.34, 35.06, 34.2, 32.76, 46.66, 45.26, 54.32, 54.42, 35.22, 37.06, 26.9, 28.62, 20.18, 22.2, 15.84, 18.08, 12.76, 14.04, 9.54, 10.32, 7.22, 7.28, 7.08, 5.82, 7.14, 6.2, 8.82, 6.76, 11.96, 10.8, 15.0, 13.4, 18.48, 17.74, 22.36, 21.94, 27.68, 30.36, 36.0, 35.94, 44.84, 32.62, 23.34, 23.48, 33.54, 44.86]
    sequency = [52, 50, 51, 49, 47, 48, 46, 45, 44, 42, 41, 43, 68, 53, 55, 56, 54, 25, 26, 40, 38, 37, 39, 67, 35, 33, 36, 34, 66, 58, 57, 60, 59, 24, 23, 27, 28, 21, 22, 61, 63, 64, 62, 69, 29, 30, 20, 19, 65, 11, 12, 10, 9, 70, 31, 32, 18, 17, 13, 14, 8, 7, 6, 5, 4, 3, 2, 1, 15, 16]
    sequency = [40, 38, 39, 37, 42, 44, 41, 43, 46, 45, 48, 47, 50, 49, 51, 52, 54, 56, 53, 55, 68, 25, 26, 35, 36, 33, 34, 10, 9, 67, 27, 28, 57, 59, 60, 58, 69, 23, 24, 62, 61, 63, 64, 70, 29, 30, 11, 12, 8, 7, 66, 22, 21, 32, 31, 20, 19, 13, 14, 65, 18, 17, 6, 5, 15, 16, 4, 3, 2, 1]
    sequency = [53, 54, 55, 56, 51, 52, 50, 49, 47, 48, 46, 45, 43, 44, 42, 41, 68, 27, 28, 40, 38, 39, 37, 57, 58, 59, 60, 69, 35, 33, 36, 34, 67, 62, 61, 63, 64, 12, 11, 25, 26, 24, 23, 30, 29, 66, 10, 9, 21, 22, 19, 20, 70, 13, 14, 31, 32, 65, 8, 7, 17, 18, 6, 5, 15, 16, 4, 3, 2, 1]
    sequency = [52, 50, 49, 51, 54, 53, 56, 55, 48, 46, 47, 45, 57, 59, 58, 60, 61, 62, 64, 63, 43, 44, 41, 42, 40, 39, 37, 38, 36, 34, 35, 33, 67, 66, 68, 69, 70, 28, 27, 26, 25, 23, 24, 29, 30, 22, 21, 8, 7, 9, 10, 65, 20, 19, 18, 17, 32, 31, 11, 12, 6, 5, 4, 3, 13, 14, 15, 16, 2, 1]
    sequency = [53, 54, 55, 56, 51, 52, 50, 49, 47, 48, 46, 45, 43, 44, 42, 41, 68, 27, 28, 40, 38, 39, 37, 57, 58, 59, 60, 69, 35, 33, 36, 34, 67, 62, 61, 63, 64, 12, 11, 25, 26, 24, 23, 30, 29, 66, 10, 9, 21, 22, 19, 20, 70, 13, 14, 31, 32, 65, 8, 7, 17, 18, 6, 5, 15, 16, 4, 3, 2, 1]
    sequency = [47, 48, 50, 49, 52, 46, 54, 45, 44, 42, 43, 51, 56, 58, 41, 39, 53, 40, 38, 55, 22, 67, 57, 21, 60, 37, 24, 68, 62, 59, 23, 61, 25, 64, 35, 26, 66, 36, 28, 69, 34, 19, 30, 63, 10, 70, 20, 27, 29, 33, 11, 12, 65, 13, 14, 9, 8, 31, 17, 32, 18, 7, 6, 5, 4, 3, 2, 15, 1, 16]
    sequency = [68.1, 66.4, 63.6, 61.4, 54.7, 50.6, 50.2, 52.0, 48.5, 50.8, 54.0, 55.2, 60.8, 63.0, 65.9, 67.8, 56.5, 57.0, 50.0, 46.8, 35.1, 37.0, 34.7, 37.4, 36.3, 37.4, 34.6, 34.5, 47.1, 46.4, 56.7, 55.9, 39.8, 37.8, 28.5, 27.2, 21.8, 20.9, 18.7, 20.3, 17.0, 14.9, 13.2, 12.9, 9.1, 9.0, 8.2, 6.6, 7.9, 6.4, 7.2, 7.6, 9.1, 7.8, 12.2, 9.7, 14.7, 14.0, 18.2, 19.1, 22.2, 26.0, 29.5, 33.4, 49.9, 37.8, 26.9, 26.0, 38.1, 49.0]
    sequency = [69, 68, 66, 65, 64, 63, 61, 60, 37, 34, 40, 45, 55, 56, 62, 67, 58, 59, 50, 54, 48, 53, 32, 43, 30, 28, 23, 20, 49, 47, 51, 52, 42, 35, 26, 33, 19, 29, 16, 25, 15, 18, 13, 9, 2, 0, 4, 1, 11, 3, 8, 5, 10, 6, 12, 7, 14, 17, 22, 31, 27, 39, 36, 44, 57, 38, 24, 21, 41, 46] 
    sequency = [46, 45, 44, 43, 48, 47, 67, 23, 24, 8, 49, 7, 50, 51, 52, 68, 25, 26, 9, 41, 42, 21, 22, 6, 10, 5, 40, 39, 53, 54, 56, 55, 27, 28, 37, 38, 66, 20, 11, 19, 4, 3, 12, 58, 57, 59, 60, 69, 29, 30, 13, 14, 36, 35, 33, 34, 65, 18, 17, 2, 1, 61, 62, 63, 64, 70, 31, 32, 15, 16]
    sequency = [53, 54, 55, 56, 51, 52, 50, 49, 47, 48, 46, 45, 43, 44, 42, 41, 68, 27, 28, 40, 38, 39, 37, 57, 58, 59, 60, 69, 35, 33, 36, 34, 67, 62, 61, 63, 64, 12, 11, 25, 26, 24, 23, 30, 29, 66, 10, 9, 21, 22, 19, 20, 70, 13, 14, 31, 32, 65, 8, 7, 17, 18, 6, 5, 15, 16, 4, 3, 2, 1]

#random sequecy:
    sequency = [53, 56, 55, 60, 67, 68, 62, 50, 65, 59, 61, 70, 69, 66, 63, 64, 41, 38, 51, 43, 54, 57, 44, 48, 52, 49, 25, 37, 42, 39, 58, 46, 13, 34, 20, 19, 21, 8, 29, 4, 23, 32, 27, 22, 12, 5, 1, 17, 33, 26, 45, 10, 14, 18, 24, 16, 7, 30, 6, 28, 2, 3, 9, 11, 36, 31, 40, 47, 35, 15]

    Ship3Dcolor(fig,bNumb,sequency,2)
    plt.show()
        
